name: 'Build Go from source'
description: 'Build and test Go from source code'
inputs:
  go_variables:
    description: 'Variables and their values ready for export'
    required: false
  test_build:
    description: 'When set to true, all tests of build are executed'
    required: false
    default: 'true'
runs:
  using: "composite"
  steps:
    - name: Clone master of go
      shell: bash
      run: git clone --depth=1 --branch master --single-branch --no-tags https://go.googlesource.com/go

    - name: Apply patch files
      shell: bash
      run: |
        if [ ! -f *.patch ]; then echo "No patch file found. Skipping."; exit 0; fi
        mv *.patch ./go/src/
        cd go/src
        git config user.email "${{ github.event.pusher.email }}"
        git config user.name "${{ github.event.pusher.name }}"
        git am --ignore-space-change --ignore-whitespace --whitespace=fix *.patch
        git show --stat -n $(ls -1 *.patch | wc -l)
        rm ./*.patch

    - name: Complete Go set up
      shell: bash
      run: |
        export ${{ inputs.go_variables }}
        mkdir -p $(go env GOCACHE)
        mkdir -p $(go env GOMODCACHE)
        mkdir -p $(dirname $(go env GOENV))
        mkdir -p $(go env GOPATH)/bin
        echo $PATH

    - name: Build
      shell: bash
      run: |
        export ${{ inputs.go_variables }}
        export goos=$(go env GOOS)
        export goarch=$(go env GOARCH)
        echo "goos=$goos" >> $GITHUB_ENV
        echo "goarch=$goarch" >> $GITHUB_ENV
        if [ -z "$GOROOT_BOOTSTRAP" ]; then export GOROOT_BOOTSTRAP=$(go env GOROOT); fi
        export crosscompile=true
        if [ "$(go env GOOS)" == "$(go env GOHOSTOS)" -a "$(go env GOARCH)" == "$(go env GOHOSTARCH)" ]; then crosscompile=false; fi
        if [ "$crosscompile" == "true" -a -z "$GOROOT_FINAL" ]; then export GOROOT_FINAL="/tmp/go"; fi
        if [ "$crosscompile" == "false" -a -z "$GOROOT_FINAL" ]; then export GOROOT_FINAL="$(pwd)/go"; fi
        echo "crosscompile=$crosscompile" >> $GITHUB_ENV
        echo "gorootfinal=$GOROOT_FINAL" >> $GITHUB_ENV
        cd go/src
        ./make.bash --no-banner
        ../bin/go version

    - name: Test locally
      shell: bash
      if: ${{ inputs.test_build == 'true' && env.crosscompile == 'false' }}
      run: |
        export ${{ inputs.go_variables }}
        if [ -z "$GOTOOLCHAIN" ]; then export GOTOOLCHAIN="auto"; fi
        cd go/src
        ./run.bash --no-rebuild

    - name: Test using QEMU
      shell: bash
      if: ${{ inputs.test_build == 'true' && env.crosscompile == 'true' }}
      run: |
        go install github.com/iwdgo/gotip-build/architecture@latest
        export ${{ inputs.go_variables }}
        architecture -imagebase=alpine
        export tooldir=${{ env.goos }}_${{ env.goarch }}
        docker cp ./go/bin/$tooldir/. xalpine:/usr/local/bin/ # in $PATH
        # create directories
        docker exec xalpine mkdir -p /tmp/go/src/cmd/go/
        docker exec xalpine mkdir /tmp/go/bin/
        docker exec xalpine mkdir -p /tmp/go/lib/time/
        docker exec xalpine mkdir /tmp/go/misc/
        docker exec xalpine mkdir -p /tmp/go/pkg/include/
        docker exec xalpine mkdir /tmp/go/pkg/temp/
        docker exec xalpine mkdir -p /tmp/go/pkg/tool/$tooldir/
        docker exec xalpine mkdir -p /tmp/go/test/bench/
        docker exec xalpine mkdir /tmp/go/test/chan/
        docker exec xalpine mkdir /tmp/go/test/dwarf/
        docker exec xalpine mkdir /tmp/go/test/fixedbugs/
        docker exec xalpine mkdir /tmp/go/test/interface/
        docker exec xalpine mkdir /tmp/go/test/ken/
        docker exec xalpine mkdir /tmp/go/test/syntax/
        docker exec xalpine mkdir /tmp/go/test/typeparam/
        # Go variables
        docker exec xalpine mkdir -p /root/.config/go/ # GOENV
        docker exec xalpine mkdir -p /root/.cache/go-build/ # GOCACHE
        docker exec xalpine mkdir -p /root/go/pkg/mod/ # GOMODCACHE
        docker exec xalpine mkdir /tmp/go-build/
        # copy executables, include directory
        docker cp ./go/VERSION.cache xalpine:/tmp/go/
        docker cp ./go/bin/$tooldir/. xalpine:/tmp/go/bin/
        docker cp ./go/pkg/tool/$tooldir/. xalpine:/tmp/go/pkg/tool/$tooldir/
        docker cp ./go/misc/. xalpine:/tmp/go/misc/
        docker cp ./go/lib/time/zoneinfo.zip xalpine:/tmp/go/lib/time/zoneinfo.zip
        docker cp ./go/pkg/include/. xalpine:/tmp/go/pkg/include/
        docker cp ./go/src/. xalpine:/tmp/go/src/
        docker cp ./go/test/. xalpine:/tmp/go/test/
        # Execute tests
        docker exec xalpine go version
        docker exec xalpine go env
        # TODO Use bash command directly when not alpine
        docker exec -w /tmp/go/src xalpine /bin/sh ./run.bash --no-rebuild

branding:
  icon: crosshair
  color: blue
