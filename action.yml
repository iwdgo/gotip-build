name: 'Build Go from source'
description: 'Build and test Go from source code'
inputs:
  go_variables:
    description: 'Variables and their values ready for export'
    required: false
  test_build:
    description: 'When set to true, all tests of build are executed'
    required: false
    default: 'true'
runs:
  using: "composite"
  steps:
    - name: Clone master of go
      shell: bash
      run: git clone --depth=1 --branch master --single-branch --no-tags https://go.googlesource.com/go

    - name: Apply patch files
      shell: bash
      run: |
        if [ ! -f *.patch ]; then echo "No patch file found. Skipping."; exit 0; fi
        mv *.patch ./go/src/
        cd go/src
        git config user.email "${{ github.event.pusher.email }}"
        git config user.name "${{ github.event.pusher.name }}"
        git am --ignore-space-change --ignore-whitespace --whitespace=fix *.patch
        git show --stat -n $(ls -1 *.patch | wc -l)
        rm ./*.patch

    - name: Build
      shell: bash
      run: |
        export ${{ inputs.go_variables }}
        export goos=$(go env GOOS)
        export goarch=$(go env GOARCH)
        echo "goos=$goos" >> $GITHUB_ENV
        echo "goarch=$goarch" >> $GITHUB_ENV
        cd go/src
        if [ -z "$GOROOT_BOOTSTRAP" ]; then export GOROOT_BOOTSTRAP=$(go env GOROOT); fi
        ./make.bash --no-banner
        ../bin/go version
        export crosscompile=true
        if [ "$(go env GOOS)" == "$(go env GOHOSTOS)" -a "$(go env GOARCH)" == "$(go env GOHOSTARCH)" ]; then crosscompile=false; fi
        echo $crosscompile
        echo "crosscompile=$crosscompile" >> $GITHUB_ENV

    - name: Test locally
      shell: bash
      if: ${{ inputs.test_build == 'true' && env.crosscompile == 'false' }}
      run: |
        cd go/src
        ./run.bash --no-rebuild

branding:
  icon: crosshair
  color: blue
